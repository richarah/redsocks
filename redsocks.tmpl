base {
	// debug: connection progress
	log_debug = off;

	// info: start and end of client session
	log_info = on;

	/* possible `log' values are:
	 *   stderr
	 *   "file:/path/to/file"
	 *   syslog:FACILITY  facility is any of "daemon", "local0"..."local7"
	 */
	log = stderr;
	// log = "file:/path/to/file";
	// log = "syslog:local7";

	// detach from console
	daemon = off;

	/* Change uid, gid and root directory, these options require root
	 * privilegies on startup.
	 * Note, your chroot may requre /etc/localtime if you write log to syslog.
	 * Log is opened before chroot & uid changing.
	 * Debian, Ubuntu and some other distributions use `nogroup` instead of
	 * `nobody`, so change it according to your system if you want redsocks
	 * to drop root privileges.
	 */
	// user = nobody;
	// group = nobody;
	// chroot = "/var/chroot";

	/* possible `redirector' values are:
	 *   iptables   - for Linux
	 *   ipf        - for FreeBSD
	 *   pf         - for OpenBSD
	 *   generic    - some generic redirector that MAY work
	 */
	redirector = iptables;

	/* Override per-socket values for TCP_KEEPIDLE, TCP_KEEPCNT,
	 * and TCP_KEEPINTVL. see man 7 tcp for details.
	 * `redsocks' relies on SO_KEEPALIVE option heavily. */
	//tcp_keepalive_time = 0;
	//tcp_keepalive_probes = 0;
	//tcp_keepalive_intvl = 0;

	// Every `redsocks` connection needs two file descriptors for sockets.
	// If `splice` is enabled, it also needs four file descriptors for
	// pipes.  `redudp` is not accounted at the moment.  When max number of
	// connection is reached, redsocks tries to close idle connections. If
	// there are no idle connections, it stops accept()'ing new
	// connections, although kernel continues to fill listenq.

	// Set maximum number of open file descriptors (also known as `ulimit -n`).
	//  0 -- do not modify startup limit (default)
	// rlimit_nofile = 0;

	// Set maximum number of served connections. Default is to deduce safe
	// limit from `splice` setting and RLIMIT_NOFILE.
	// redsocks_conn_max = 0;

	// Close connections idle for N seconds when/if connection count
	// limit is hit.
	//  0 -- do not close idle connections
	//  7440 -- 2 hours 4 minutes, see RFC 5382 (default)
	// connpres_idle_timeout = 7440;

	// `max_accept_backoff` is a delay in milliseconds to retry `accept()`
	// after failure (e.g. due to lack of file descriptors). It's just a
	// safety net for misconfigured `redsocks_conn_max`, you should tune
	// redsocks_conn_max if accept backoff happens.
	// max_accept_backoff = 60000;
}

redsocks {
  local_ip = 0.0.0.0;
  local_port = 7778;

  type = http-connect;
  ip = 127.0.0.1;
  port = 7777;
}
